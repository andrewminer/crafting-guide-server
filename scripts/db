#!/bin/bash

if ! which heroku >/dev/null; then
    echo "FATAL: heroku not found!  Please install Heroku!"
    exit 1
fi

if ! which psql >/dev/null; then
    echo "FATAL: psql not found!  Please install Postgres!"
    exit 1
fi

if ! which coffee >/dev/null; then
    echo "WARNING: coffee not found! Installing now..."
    npm install -g coffee
fi

if ! which db-migrate >/dev/null; then
    echo "WARNING: db-migrate not found! Installing now..."
    npm install -g db-migrate@0.10.0-beta.12
    npm install -g db-migrate-pg
fi

USAGE=$(cat <<-END
USAGE: ./scripts/db <command> [<option>*]

COMMANDS:

    console                     connect to the database in the selected env
    create-test-db              clone the database (without data) and make a
                                    test database with the same schema
    nuke                        erase the database and start over from scratch
    script                      execute a coffee script. Requires --script
    seed                        populate seed data from ./src/db/seed.coffee

    create-migration            create a new migration. Requires --name
    migrate                     apply all unapplied migrations
    redo                        rollback the last migration and re-migrate
    rollback                    rollback the previous migration

OPTIONS:

    --name <migration name>     the name of the migration to create
    --script <path to script>   the script to execute
    --staging                   use the staging environment instead of local
    --prod                      use the prod environment instead of local
END
)

DATABASE_NAME="crafting_guide"
MIGRATIONS_DIR="./src/db/migrations"

COMMANDS="true"

# Command Functions ####################################################################################################

function console {
    echo "Connected to $DATABASE_URL in the $ENV environment"
    psql $DATABASE_URL
}
COMMANDS="$COMMANDS|console"

function create-migration {
    [[ "$NAME" == "" ]] && usage "Expected the --name option"
    db-migrate create $NAME $OPTIONS
}
COMMANDS="$COMMANDS|create-migration"

function create-test-db {
    pg_dump $DATABASE_NAME -s > .tmp.schema.sql || die "Could not connect to database: $DATABASE_NAME"
    psql -c "drop database if exists ${DATABASE_NAME}_test;" >/dev/null
    psql -c "create database ${DATABASE_NAME}_test;" >/dev/null
    psql "${DATABASE_NAME}_test" < .tmp.schema.sql >/dev/null
    rm .tmp.schema.sql
}
COMMANDS="$COMMANDS|create-test-db"

function rollback {
    db-migrate down $OPTIONS
}
COMMANDS="$COMMANDS|rollback"

function nuke {
    if [[ "$CONFIRM" != "$ENV" ]]; then
        read -p "Really destroy the database in $ENV? Type \"$ENV\" to continue: " RESPONSE
        if [[ "$RESPONSE" != "$ENV" ]]; then
            echo "Aborting!"
            exit 0
        fi
    fi

    if [[ "$ENV" == "local" ]]; then
        psql -c "drop database if exists $DATABASE_NAME;"
        psql -c "create database $DATABASE_NAME;"
    elif [[ "$APP" != "" ]]; then
        ADDON_ID=$(heroku addons | grep "$APP" | grep postgresql | awk '{print $2}')
        ADDON_TYPE=$(heroku addons | grep "$APP" | grep postgresql | awk '{print $3}')
        heroku addons:destroy $ADDON_ID --confirm $APP
        heroku addons:create $ADDON_TYPE --app $APP
        set-database-url
    else
        echo "Unknown environment: $ENV"
        exit 1
    fi

    migrate
    seed
}
COMMANDS="$COMMANDS|nuke"

function migrate {
    db-migrate up $OPTIONS
}
COMMANDS="$COMMANDS|migrate"

function redo {
    rollback && migrate
}
COMMANDS="$COMMANDS|redo"

function script {
    if [[ ! -e "$SCRIPT" ]]; then
        echo "Could not find script file: $SCRIPT"
        exit 1
    fi

    echo "executing $SCRIPT..."
    coffee "$SCRIPT" "$@"
}
COMMANDS="$COMMANDS|script"

function seed {
    echo "loading seed data..."
    coffee ./src/db/seed.coffee
}
COMMANDS="$COMMANDS|seed"

function usage {
    echo "$USAGE"; echo
    [[ "$1" != "" ]] && echo "ERROR: $*" && echo
    exit 1
}
COMMANDS="$COMMANDS|usage"

# Helper Functions #####################################################################################################

function die {
    [[ "$1" != "" ]] && echo "$*"
    exit 1
}

function set-app {
    if [[ "$ENV" == "staging" ]]; then
        APP="crafting-guide-staging"
    elif [[ "$ENV" == "prod" ]]; then
        APP="crafting-guide-production"
    fi
}

function set-database-url {
    if [[ "$ENV" == "local" ]]; then
        export DATABASE_URL="postgres:///crafting_guide"
    elif [[ "$ENV" == "staging" ]]; then
        export DATABASE_URL=$(./scripts/heroku dburl)
        export PGSSLMODE="require"
    elif [[ "$ENV" == "prod" ]]; then
        export DATABASE_URL=$(./scripts/heroku dburl --prod)
        export PGSSLMODE="require"
    else
        usage "Unknown environment: $ENV"
    fi
}

########################################################################################################################

COMMAND="$1"
shift

[[ "$COMMAND" == "" ]] && usage

if ! echo "$COMMAND" | egrep -q "$COMMANDS"; then
    usage "Unknown command: $COMMAND"
fi

CONFIRM=""
DRY_RUN=""
ENV="local"
NAME=""
SCRIPT=""
VERBOSE=""

while [[ "$1" != "" ]]; do
    case "$1" in
        "--confirm") shift; CONFIRM="$1";;
        "--dry-run") DRY_RUN="--dry-run";;
        "--name")    shift; NAME="$1";;
        "--script")  shift; SCRIPT="$1"; shift; break;;
        "--staging") ENV="staging";;
        "--prod")    ENV="prod";;
        "--verbose") VERBOSE="--verbose";;
    esac
    shift
done

set-app
set-database-url
OPTIONS="$DRY_RUN $VERBOSE --migrations-dir $MIGRATIONS_DIR --coffee-file"

$COMMAND "$@"
